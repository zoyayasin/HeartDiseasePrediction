# -*- coding: utf-8 -*-
"""HeartDiseasePredictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lVYKF3Vur9II7ki2pdEzqVUm2PvO58Z_
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
plt.style.use('seaborn-whitegrid')

input_data = pd.read_csv("/content/FinalDataClean(1).csv")
input_data.head()

#handling missing values
input_data = input_data.fillna(0)

#input feature selection
selected_features = ['LocID','Average','Diabetes','Obesity','Physical Inactivity','Smoking','18-24','25-44','35+','45-64','65+','75+','Female','Male','Hispanic','Non-Hispanic Asian','Non-Hispanic Black','Non-Hispanic White']
targets = ['Acute Myocardial Infarction (Heart Attack)','Coronary Heart Disease','Major Cardiovascular Disease','Stroke']
X = input_data[selected_features]
Y = input_data[targets]

from sklearn.model_selection import train_test_split

X_train = []
y_train = []
X_test = []
y_test = []

#split into training and testing data for all 4 targets
for i in range(len(targets)):
  X_tr,X_ts,y_tr,y_ts= train_test_split(X,Y.iloc[:,i],test_size=0.20,random_state=0)
  # X_tr_fs,X_ts_fs, fs = select_features_correlation(X_tr, y_tr, X_ts)
  # X_train.append(X_tr_fs)
  X_train.append(X_tr)
  y_train.append(y_tr)
  # X_test.append(X_ts_fs)
  X_test.append(X_ts)
  y_test.append(y_ts)

print(X_train[0])

from sklearn.linear_model import LinearRegression

#array of models
model_list = []

#fit 4 linear regression models for the 4 targets
for idx in range(len(targets)):
  model = LinearRegression()
  model.fit(X_train[idx],y_train[idx])
  model_list.append(model)

from sklearn.linear_model import Lasso

#array of models
model_list = []

#fit 4 lasso regression models for the 4 targets
for idx in range(len(targets)):
  model = Lasso(alpha=0.5)
  model.fit(X_train[idx],y_train[idx])
  model_list.append(model)

from sklearn.linear_model import Ridge

#array of models
model_list = []

#fit 4 ridge regression models for the 4 targets
for idx in range(len(targets)):
  model = Ridge(alpha=0.05)
  model.fit(X_train[idx],y_train[idx])
  model_list.append(model)

#predictions
y_pred = []
for i, model in enumerate(model_list):
  y_pred.append(model.predict(X_test[i]))

#model validation
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

for idx,target in enumerate(targets):
  print("MAE for %s model = %f"%(target,(mean_absolute_error(y_test[idx], y_pred[idx]))))
  print("MSE for %s model = %f"%(target,(mean_squared_error(y_test[idx], y_pred[idx]))))
  print("RMSE for %s model = %f"%(target,np.sqrt(mean_squared_error(y_test[idx], y_pred[idx]))))
  print("R2 score for %s model = %f\n"%(target,r2_score(y_test[idx], y_pred[idx])))

#baseline model
y_baseline_list = []
for i in range(len(targets)):
  y_baseline = np.array(np.mean(y_test[i]))
  ones_vector =  np.ones((y_test[0].shape[0],1))
  y_pred_baseline = np.multiply(y_baseline, ones_vector)
  y_baseline_list.append(y_pred_baseline)

#baseline model validation
for idx,target in enumerate(targets):
  print("MAE for %s model = %f"%(target,(mean_absolute_error(y_test[idx], y_baseline_list[i]))))
  print("MSE for %s model = %f"%(target,(mean_squared_error(y_test[idx], y_baseline_list[i]))))
  print("RMSE for %s model = %f"%(target,np.sqrt(mean_squared_error(y_test[idx], y_baseline_list[i]))))
  print("R2 score for %s model = %f\n"%(target,r2_score(y_test[idx], y_baseline_list[i])))

y1 = np.array(Y.iloc[:,0])
y2 = np.array(Y.iloc[:,1])
y3 = np.array(Y.iloc[:,2])
y4 = np.array(Y.iloc[:,3])

X = np.array(X)

from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error

mean_error1=[]
std_error1=[] 
mean_error2=[]
std_error2=[] 
Ci_range = [0.0001, 0.0025, 0.05, 0.5, 1, 5, 10] 
for C in Ci_range: 
    model1 = Ridge(alpha=1/(2*C)) 
    model2 = Lasso(alpha=1/(2*C))
    temp1=[]
    temp2=[]  
    kf = KFold(n_splits=5) 
    for train, test in kf.split(X): 
        model1.fit(X[train], y1[train]) 
        model2.fit(X[train], y1[train])
        ypred1 = model1.predict(X[test]) 
        ypred2 = model2.predict(X[test]) 
        temp1.append(mean_absolute_error(y1[test],ypred1)) 
        temp2.append(mean_absolute_error(y1[test],ypred2)) 
    mean_error1.append(np.array(temp1).mean()) 
    std_error1.append(np.array(temp1).std()) 
    mean_error2.append(np.array(temp2).mean()) 
    std_error2.append(np.array(temp2).std())        
fig = plt.figure()
fig.set_figwidth(10)
fig.set_figheight(6)
plt.errorbar(Ci_range,mean_error1,yerr=std_error1, label = 'Ridge Model')
plt.errorbar(Ci_range,mean_error2,yerr=std_error2, label = 'Lasso Model') 
plt.xlabel('Ci') 
plt.ylabel('Mean abs error') 
plt.legend()
plt.title("Error bar plot for different C values for Ridge and Lasso models")
plt.show()
print(mean_error1)
print(mean_error2)

from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error

mean_error1=[]
std_error1=[] 
mean_error2=[]
std_error2=[] 
Ci_range = [0.0001, 0.0025, 0.05, 0.5, 1, 5, 10] 
for C in Ci_range: 
    model1 = Ridge(alpha=1/(2*C)) 
    model2 = Lasso(alpha=1/(2*C))
    temp1=[]
    temp2=[]  
    kf = KFold(n_splits=5) 
    for train, test in kf.split(X): 
        model1.fit(X[train], y2[train]) 
        model2.fit(X[train], y2[train])
        ypred1 = model1.predict(X[test]) 
        ypred2 = model2.predict(X[test]) 
        temp1.append(mean_absolute_error(y2[test],ypred1)) 
        temp2.append(mean_absolute_error(y2[test],ypred2)) 
    mean_error1.append(np.array(temp1).mean()) 
    std_error1.append(np.array(temp1).std()) 
    mean_error2.append(np.array(temp2).mean()) 
    std_error2.append(np.array(temp2).std())        
fig = plt.figure()
fig.set_figwidth(10)
fig.set_figheight(6)
plt.errorbar(Ci_range,mean_error1,yerr=std_error1, label = 'Ridge Model')
plt.errorbar(Ci_range,mean_error2,yerr=std_error2, label = 'Lasso Model') 
plt.xlabel('Ci') 
plt.ylabel('Mean abs error') 
plt.legend()
plt.title("Error bar plot for different C values for Ridge and Lasso models")
plt.show()
print(mean_error1)
print(mean_error2)

from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error

mean_error1=[]
std_error1=[] 
mean_error2=[]
std_error2=[] 
Ci_range = [0.0001, 0.0025, 0.05, 0.5, 1, 5, 10] 
for C in Ci_range: 
    model1 = Ridge(alpha=1/(2*C)) 
    model2 = Lasso(alpha=1/(2*C))
    temp1=[]
    temp2=[]  
    kf = KFold(n_splits=5) 
    for train, test in kf.split(X): 
        model1.fit(X[train], y3[train]) 
        model2.fit(X[train], y3[train])
        ypred1 = model1.predict(X[test]) 
        ypred2 = model2.predict(X[test]) 
        temp1.append(mean_absolute_error(y3[test],ypred1)) 
        temp2.append(mean_absolute_error(y3[test],ypred2)) 
    mean_error1.append(np.array(temp1).mean()) 
    std_error1.append(np.array(temp1).std()) 
    mean_error2.append(np.array(temp2).mean()) 
    std_error2.append(np.array(temp2).std())        
fig = plt.figure()
fig.set_figwidth(10)
fig.set_figheight(6)
plt.errorbar(Ci_range,mean_error1,yerr=std_error1, label = 'Ridge Model')
plt.errorbar(Ci_range,mean_error2,yerr=std_error2, label = 'Lasso Model') 
plt.xlabel('Ci') 
plt.ylabel('Mean abs error') 
plt.legend()
plt.title("Error bar plot for different C values for Ridge and Lasso models")
plt.show()
print(mean_error)
print(mean_error1)
print(mean_error2)

from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error

mean_error1=[]
std_error1=[] 
mean_error2=[]
std_error2=[] 
Ci_range = [0.0001, 0.0025, 0.05, 0.5, 1, 5, 10] 
for C in Ci_range: 
    model1 = Ridge(alpha=1/(2*C)) 
    model2 = Lasso(alpha=1/(2*C))
    temp1=[]
    temp2=[]  
    kf = KFold(n_splits=5) 
    for train, test in kf.split(X): 
        model1.fit(X[train], y4[train]) 
        model2.fit(X[train], y4[train])
        ypred1 = model1.predict(X[test]) 
        ypred2 = model2.predict(X[test]) 
        temp1.append(mean_absolute_error(y4[test],ypred1)) 
        temp2.append(mean_absolute_error(y4[test],ypred2)) 
    mean_error1.append(np.array(temp1).mean()) 
    std_error1.append(np.array(temp1).std()) 
    mean_error2.append(np.array(temp2).mean()) 
    std_error2.append(np.array(temp2).std())        
fig = plt.figure()
fig.set_figwidth(10)
fig.set_figheight(6)
plt.errorbar(Ci_range,mean_error1,yerr=std_error1, label = 'Ridge Model')
plt.errorbar(Ci_range,mean_error2,yerr=std_error2, label = 'Lasso Model') 
plt.xlabel('Ci') 
plt.ylabel('Mean abs error') 
plt.legend()
plt.title("Error bar plot for different C values for Ridge and Lasso models")
plt.show()
print(mean_error)